##When a user calls the makeCacheMatrix function, they can enter a square matrix (equal column and row lengths)
##The inverse of that matrix will then be assigned to an output variable and stored in cache
## The cacheSolve function allows a user to assign a matrix variable to it and will then return the inverse of that matrix
## If no matrix variable is assigned by a user, the inverse matrix stored in the cache will be returned
##makeCacheMatrix defines setter and initialize input and output values
##It then defines a getter for input and getter/setter for inverse matrices
makeCacheMatrix <- function (inputMatrix = matrix()) {
outputMatrix <- NULL
set <- function(cacheMatrix) {
inputMatrix <<- cacheMatrix
outputMatrix <<- NULL
}
get <- function() inputMatrix
setinverse <- function(solve) outputMatrix <<- solve
getinverse <- function() outputMatrix
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
##cacheSolve receives a matrix as defined by the user and returns the inverse of that matrix
cacheSolve <- function(matrixEntry, ...)
{
##If no new matrix is assigned to cacheSolve, then the cached inverse matrix will be assigned
cacheMatrix <- matrixEntry$getinverse()
if(!is.null(cacheMatrix))
{
message("Getting Cached Matrix")
return(cacheMatrix)
}
data <- matrixEntry$get()
cacheMatrix <- solve(data, ...)
matrixEntry$setinverse(cacheMatrix)
cacheMatrix
}
mtx <- makeCacheMatrix(c(1,3,5,7), ncol=3, nrow=3)
mtx <- makeCacheMatrix(matrix(1,3,5,7), ncol=3, nrow=3)
mtx <- makeCacheMatrix(matrixc((1,3,5,7)), ncol=3, nrow=3)
mtx <- makeCacheMatrix(matrix(c(1,3,5,7)), ncol=3, nrow=3)
makeCacheMatrix <- function (inputMatrix = matrix()) {
outputMatrix <- NULL
set <- function(cacheMatrix) {
inputMatrix <<- cacheMatrix
outputMatrix <<- NULL
}
get <- function() inputMatrix
setinverse <- function(solve) outputMatrix <<- solve
getinverse <- function() outputMatrix
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
##cacheSolve receives a matrix as defined by the user and returns the inverse of that matrix
cacheSolve <- function(matrixEntry, ...)
{
##If no new matrix is assigned to cacheSolve, then the cached inverse matrix will be assigned
cacheMatrix <- matrixEntry$getinverse()
if(!is.null(cacheMatrix))
{
message("Getting Cached Matrix")
return(cacheMatrix)
}
data <- matrixEntry$get()
cacheMatrix <- solve(data, ...)
matrixEntry$setinverse(cacheMatrix)
cacheMatrix
}
x <- matrix(c(1,3,5,7), ncol=3, nrow=3)
x <- matrix(c(1,3,5,7), ncol=2, nrow=2)
makeCacheMatrix(x)
y <- makeCacheMatrix(x)
z <- cacheMean(y)
z <- cacheSolve(y)
z
a <- cacheSolve(y)
a
